import os import json from datetime import datetime from flask import Flask, request import telebot from telebot import types

BOT_TOKEN = os.environ.get("BOT_TOKEN") ADMIN_ID = int(os.environ.get("ADMIN_ID", "123456")) ADMIN_PASSWORD = "wokolad"

bot = telebot.TeleBot(BOT_TOKEN) app = Flask(name)

USERS_FILE = "users.json" TIMER_FILE = "timer.json" ORGANIZERS_FILE = "organizers.json"

–ó–∞–≥—Ä—É–∑–∫–∞/—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ JSON

def load_json(filename, default): if os.path.exists(filename): with open(filename, encoding="utf-8") as f: return json.load(f) return default

def save_json(filename, data): with open(filename, "w", encoding="utf-8") as f: json.dump(data, f, indent=2, ensure_ascii=False)

users = load_json(USERS_FILE, {}) organizers = load_json(ORGANIZERS_FILE, [ADMIN_ID]) timer_data = load_json(TIMER_FILE, {"timestamp": None})

user_states = {}

FOOTER = ("\n\n‚≠ê –ö–æ–Ω–∫—É—Ä—Å –ø—Ä–æ–≤–æ–¥–∏—Ç—Å—è –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ 24mine (Minecraft PE 0.14.x)" "\nüè† IP: play.24mine.ru, üîó –ü–æ—Ä—Ç: 19133" "\nüèÜ –ì–ª–∞–≤–Ω—ã–π –ø—Ä–∏–∑: –î–æ–Ω–∞—Ç-–∫–µ–π—Å" "\nüî∏ –û—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä: @wokolad")

@bot.message_handler(commands=["start"]) def cmd_start(message): uid = message.from_user.id name = message.from_user.first_name or "–ò–≥—Ä–æ–∫" is_admin = uid in organizers role = "üöÄ –í—ã –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä. –í–∞–º –¥–æ—Å—Ç—É–ø–Ω—ã –∫–æ–º–∞–Ω–¥—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞." if is_admin else "üèãÔ∏è –í—ã —É—á–∞—Å—Ç–Ω–∏–∫." bot.send_message(uid, f"üëã –ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, {name}!\n{role}\n\n‚úâÔ∏è –ù–∞–ø–∏—à–∏—Ç–µ /help —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å –∫–æ–º–∞–Ω–¥—ã.{FOOTER}")

@bot.message_handler(commands=["help"]) def cmd_help(message): text = "üìñ –ö–æ–º–∞–Ω–¥—ã:\n" text += "/start ‚Äî –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫ –±–æ—Ç–∞\n" text += "/help ‚Äî —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥\n" text += "/info ‚Äî –ø–æ–¥—Ä–æ–±–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–æ–Ω–∫—É—Ä—Å–µ\n" text += "/event ‚Äî –∑–∞–ø–æ–ª–Ω–∏—Ç—å –∞–Ω–∫–µ—Ç—É –¥–ª—è —É—á–∞—Å—Ç–∏—è\n" text += "/edit ‚Äî –∏–∑–º–µ–Ω–∏—Ç—å –∞–Ω–∫–µ—Ç—É\n" text += "/delete ‚Äî —É–¥–∞–ª–∏—Ç—å –∞–Ω–∫–µ—Ç—É\n" text += "/contact ‚Äî —Å–≤—è–∑–∞—Ç—å—Å—è —Å –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä–æ–º\n" if message.from_user.id in organizers: text += "\nüîß –ê–¥–º–∏–Ω-–∫–æ–º–∞–Ω–¥—ã:\n" text += "/settimer ‚Äî —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ –∫–æ–Ω–∫—É—Ä—Å–∞\n" text += "/removetimer ‚Äî —É–¥–∞–ª–∏—Ç—å –≤—Ä–µ–º—è –∫–æ–Ω–∫—É—Ä—Å–∞\n" text += "/participants ‚Äî —Å–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤\n" text += "/promote ID ‚Äî –≤—ã–¥–∞—Ç—å –ø—Ä–∞–≤–∞ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä–∞\n" text += "/removeadmin ID ‚Äî —É–¥–∞–ª–∏—Ç—å –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä–∞\n" text += "/notify_all –¢–ï–ö–°–¢ ‚Äî —É–≤–µ–¥–æ–º–∏—Ç—å –≤—Å–µ—Ö\n" text += "/notify_interested –¢–ï–ö–°–¢ ‚Äî —É–≤–µ–¥–æ–º–∏—Ç—å –∑–∞–∏–Ω—Ç–µ—Ä–µ—Å–æ–≤–∞–Ω–Ω—ã—Ö\n" text += "/notify_uninterested –¢–ï–ö–°–¢ ‚Äî —É–≤–µ–¥–æ–º–∏—Ç—å –Ω–µ–∑–∞–∏–Ω—Ç–µ—Ä–µ—Å–æ–≤–∞–Ω–Ω—ã—Ö\n" text += "/backup wokolad ‚Äî —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π" bot.send_message(message.chat.id, text + FOOTER)

@bot.message_handler(commands=["info"]) def cmd_info(message): if timer_data["timestamp"]: event_time = datetime.fromtimestamp(timer_data["timestamp"]) now = datetime.now() delta = event_time - now if delta.total_seconds() > 0: t = f"üïí –ù–∞—á–∞–ª–æ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ –Ω–∞ {event_time.strftime('%Y-%m-%d %H:%M')}\n‚è≥ –û—Å—Ç–∞–ª–æ—Å—å: {delta.days} –¥–Ω {(delta.seconds // 3600)} —á" else: t = "üéâ –ö–æ–Ω–∫—É—Ä—Å —É–∂–µ –Ω–∞—á–∞–ª—Å—è!" else: t = "‚ùì –ù–∞—á–∞–ª–æ –∏–≥—Ä—ã –µ—â—ë –Ω–µ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ." bot.send_message(message.chat.id, f"üéÆ –ö–æ–Ω–∫—É—Ä—Å –æ—Ç @wokolad\n\n{t}{FOOTER}")

@bot.message_handler(commands=["contact"]) def cmd_contact(message): bot.send_message(message.chat.id, "üì® –°–≤—è–∑–∞—Ç—å—Å—è —Å –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä–æ–º: @wokolad" + FOOTER)

@bot.message_handler(commands=["event", "edit"]) def cmd_event(message): user_states[message.chat.id] = {"step": 1, "answers": {}} bot.send_message(message.chat.id, "üìù –ö–∞–∫–æ–π —É –≤–∞—Å –∏–≥—Ä–æ–≤–æ–π –Ω–∏–∫–Ω–µ–π–º –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ 24mine?")

@bot.message_handler(commands=["delete"]) def cmd_delete(message): if str(message.from_user.id) in users: users.pop(str(message.from_user.id)) save_json(USERS_FILE, users) bot.send_message(message.chat.id, "‚úÖ –í–∞—à–∞ –∞–Ω–∫–µ—Ç–∞ —É–¥–∞–ª–µ–Ω–∞.") else: bot.send_message(message.chat.id, "‚ùì –£ –≤–∞—Å –Ω–µ—Ç –∞–Ω–∫–µ—Ç—ã.")

@bot.message_handler(commands=["settimer"]) def cmd_settimer(message): if message.from_user.id in organizers: bot.send_message(message.chat.id, "üïì –í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è (–ì–ì–ì–ì-–ú–ú-–î–î –ß–ß:–ú–ú):") user_states[message.chat.id] = {"admin_timer": True}

@bot.message_handler(commands=["removetimer"]) def cmd_removetimer(message): if message.from_user.id in organizers: timer_data["timestamp"] = None save_json(TIMER_FILE, timer_data) bot.send_message(message.chat.id, "‚ùå –í—Ä–µ–º—è –∫–æ–Ω–∫—É—Ä—Å–∞ —É–¥–∞–ª–µ–Ω–æ.")

@bot.message_handler(commands=["participants"]) def cmd_participants(message): if message.from_user.id in organizers: if not users: bot.send_message(message.chat.id, "üò¢ –ù–µ—Ç —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤.") return text = "üìÑ –£—á–∞—Å—Ç–Ω–∏–∫–∏:\n" for uid, data in users.items(): text += f"@{data.get('username', '–±–µ–∑ username')} (ID: {uid})\n" for k, v in data['answers'].items(): text += f"‚Ä¢ {k}: {v}\n" text += "\n" bot.send_message(message.chat.id, text)

@bot.message_handler(commands=["promote"]) def cmd_promote(message): if message.from_user.id in organizers: parts = message.text.split() if len(parts) == 2 and parts[1].isdigit(): uid = int(parts[1]) if uid not in organizers: organizers.append(uid) save_json(ORGANIZERS_FILE, organizers) bot.send_message(message.chat.id, f"‚úÖ {uid} —Ç–µ–ø–µ—Ä—å –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä.")

@bot.message_handler(commands=["removeadmin"]) def cmd_removeadmin(message): if message.from_user.id in organizers: parts = message.text.split() if len(parts) == 2 and parts[1].isdigit(): uid = int(parts[1]) if uid in organizers and uid != ADMIN_ID: organizers.remove(uid) save_json(ORGANIZERS_FILE, organizers) bot.send_message(message.chat.id, f"‚úÖ {uid} –±–æ–ª—å—à–µ –Ω–µ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä.")

@bot.message_handler(commands=["notify_all", "notify_interested", "notify_uninterested"]) def cmd_notify(message): if message.from_user.id not in organizers: return parts = message.text.split(maxsplit=1) if len(parts) < 2: bot.send_message(message.chat.id, "‚ùì –£–∫–∞–∂–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.") return cmd = message.text.split()[0][1:] text = parts[1] + FOOTER for uid, data in users.items(): interested = data["answers"].get("–í—ã —Ö–æ—Ç–∏—Ç–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è –Ω–∞ –∫–æ–Ω–∫—É—Ä—Å?", "").lower() if cmd == "notify_all": bot.send_message(int(uid), text) elif cmd == "notify_interested" and interested in ["–¥–∞", "–ø–æ–¥—É–º–∞—é"]: bot.send_message(int(uid), text) elif cmd == "notify_uninterested" and interested not in ["–¥–∞", "–ø–æ–¥—É–º–∞—é"]: bot.send_message(int(uid), text)

@bot.message_handler(commands=["backup"]) def cmd_backup(message): if message.text.strip() == f"/backup {ADMIN_PASSWORD}": with open("backup.json", "w", encoding="utf-8") as f: json.dump(users, f, indent=2, ensure_ascii=False) bot.send_message(message.chat.id, "‚úÖ –†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞.")

@bot.message_handler(func=lambda m: m.chat.id in user_states) def handle_state(msg): uid = str(msg.from_user.id) state = user_states[msg.chat.id]

if "admin_timer" in state:
    try:
        dt = datetime.strptime(msg.text, "%Y-%m-%d %H:%M")
        timer_data["timestamp"] = int(dt.timestamp())
        save_json(TIMER_FILE, timer_data)
        bot.send_message(msg.chat.id, "‚úÖ –í—Ä–µ–º—è —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ.")
    except:
        bot.send_message(msg.chat.id, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ü—Ä–∏–º–µ—Ä: 2025-07-12 18:00")
    user_states.pop(msg.chat.id)
    return

step = state.get("step")
answers = state["answers"]

if step == 1:
    answers["–ù–∏–∫ –≤ Minecraft"] = msg.text.strip()[:25]
    markup = types.ReplyKeyboardMarkup(one_time_keyboard=True, resize_keyboard=True)
    markup.add("–î–∞", "–ù–µ—Ç", "–ü–æ–¥—É–º–∞—é")
    bot.send_message(msg.chat.id, "‚ùì –í—ã —Ö–æ—Ç–∏—Ç–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è –Ω–∞ –∫–æ–Ω–∫—É—Ä—Å?", reply_markup=markup)
    state["step"] = 2
elif step == 2:
    answers["–í—ã —Ö–æ—Ç–∏—Ç–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è –Ω–∞ –∫–æ–Ω–∫—É—Ä—Å?"] = msg.text
    markup = types.ReplyKeyboardMarkup(one_time_keyboard=True, resize_keyboard=True)
    markup.add("–î–∞", "–ù–µ—Ç", "–ü–æ–¥—É–º–∞—é", "–°–º–æ—Ç—Ä—è –≤ –∫–∞–∫–æ–µ –≤—Ä–µ–º—è, –µ—Å–ª–∏ –±—É–¥—É —Å–≤–æ–±–æ–¥–µ–Ω –ø—Ä–∏–¥—É")
    bot.send_message(msg.chat.id, "‚ùì –í—ã –±—É–¥–µ—Ç–µ —É—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å –≤ –∫–æ–Ω–∫—É—Ä—Å–µ?", reply_markup=markup)
    state["step"] = 3
elif step == 3:
    answers["–í—ã –±—É–¥–µ—Ç–µ —É—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å –≤ –∫–æ–Ω–∫—É—Ä—Å–µ?"] = msg.text
    bot.send_message(msg.chat.id, "üåç –° –∫–∞–∫–æ–≥–æ —Ä–µ–≥–∏–æ–Ω–∞ –≤—ã –±—É–¥–µ—Ç–µ —É—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å? (–ù–∞–ø–∏—à–∏—Ç–µ –≤ –∫–∞–∫–æ–π —Å—Ç—Ä–∞–Ω–µ –≤—ã –∂–∏–≤—ë—Ç–µ)", reply_markup=types.ReplyKeyboardRemove())
    state["step"] = 4
elif step == 4:
    answers["–†–µ–≥–∏–æ–Ω (—Å—Ç—Ä–∞–Ω–∞)"] = msg.text.strip()
    users[uid] = {
        "username": msg.from_user.username or f"id_{uid}",
        "answers": answers
    }
    save_json(USERS_FILE, users)
    markup = types.ReplyKeyboardMarkup(one_time_keyboard=True, resize_keyboard=True)
    markup.add("–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", "–ò–∑–º–µ–Ω–∏—Ç—å –∞–Ω–∫–µ—Ç—É", "–û—Ç–º–µ–Ω–∞")
    text = "üìÑ –í–∞—à–∞ –∞–Ω–∫–µ—Ç–∞:\n"
    for k, v in answers.items():
        text += f"‚Ä¢ {k}: {v}\n"
    bot.send_message(msg.chat.id, text, reply_markup=markup)
    user_states.pop(msg.chat.id)

@app.route("/", methods=["GET"]) def index(): return "Bot is running"

@app.route("/", methods=["POST"]) def webhook(): update = telebot.types.Update.de_json(request.data.decode("utf-8")) bot.process_new_updates([update]) return "ok", 200

if name == "main": port = int(os.environ.get("PORT", 8080)) app.run(host="0.0.0.0", port=port)
