import os import json from datetime import datetime from flask import Flask, request import telebot from telebot import types

ENV config

BOT_TOKEN = os.environ.get("BOT_TOKEN") ADMIN_ID = int(os.environ.get("ADMIN_ID", "123456")) BACKUP_PASSWORD = "wokolad"

bot = telebot.TeleBot(BOT_TOKEN) app = Flask(name)

Files

USERS_FILE = "users.json" TIMER_FILE = "timer.json" ORGANIZERS_FILE = "organizers.json"

Storage

user_states = {} users = {} organizers = [ADMIN_ID] timer_data = {"timestamp": None}

Utils

def load_json(filename, default): if os.path.exists(filename): with open(filename) as f: return json.load(f) return default

def save_json(filename, data): with open(filename, "w") as f: json.dump(data, f, indent=2)

users = load_json(USERS_FILE, {}) organizers = load_json(ORGANIZERS_FILE, [ADMIN_ID]) timer_data = load_json(TIMER_FILE, {"timestamp": None})

Footer info

FOOTER = "\n\n‚ú® –ö–æ–Ω–∫—É—Ä—Å –ø—Ä–æ–≤–æ–¥–∏—Ç—Å—è –Ω–∞ Minecraft —Å–µ—Ä–≤–µ—Ä–µ 24Mine\nüåê IP: play.24mine.ru | üì± –ü–æ—Ä—Ç: 19133\nüîπ –í–µ—Ä—Å–∏—è: 0.14.x\nü•á –ì–ª–∞–≤–Ω—ã–π –ø—Ä–∏–∑: –î–æ–Ω–∞—Ç-–∫–µ–π—Å\nüë®‚Äçüéì –û—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä: @wokolad"

Command /start

@bot.message_handler(commands=["start"]) def start_cmd(message): uid = message.from_user.id name = message.from_user.first_name or "–ò–≥—Ä–æ–∫" is_admin = uid in organizers text = f"‚úã –ü—Ä–∏–≤–µ—Ç, {name}!

üéì –≠—Ç–æ –±–æ—Ç –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –Ω–∞ –∫–æ–Ω–∫—É—Ä—Å Minecraft 0.14.x –æ—Ç @wokolad.

üåü –¢—ã –º–æ–∂–µ—à—å: ‚Ä¢ üî¢ /event ‚Äî –∑–∞–ø–æ–ª–Ω–∏—Ç—å –∞–Ω–∫–µ—Ç—É –¥–ª—è —É—á–∞—Å—Ç–∏—è ‚Ä¢ üìú /info ‚Äî –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–æ–Ω–∫—É—Ä—Å–µ ‚Ä¢ üì¢ /contact ‚Äî —Å–≤—è–∑–∞—Ç—å—Å—è —Å –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä–æ–º ‚Ä¢ üîß /help ‚Äî —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∫–æ–º–∞–Ω–¥" if is_admin: text += "\n‚Ä¢ üõ†Ô∏è /admin ‚Äî –∞–¥–º–∏–Ω-–∫–æ–º–∞–Ω–¥—ã" bot.send_message(uid, text + FOOTER)

@bot.message_handler(commands=["help"]) def help_cmd(message): text = "‚ùì –í—Å–µ –∫–æ–º–∞–Ω–¥—ã: /start ‚Äî –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –∏ –∏–Ω—Ñ–æ /info ‚Äî –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–æ–Ω–∫—É—Ä—Å–µ /event ‚Äî –∑–∞–ø–æ–ª–Ω–∏—Ç—å –∞–Ω–∫–µ—Ç—É /contact ‚Äî —Å–≤—è–∑–∞—Ç—å—Å—è —Å –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä–æ–º" if message.from_user.id in organizers: text += "\n\nüõ†Ô∏è –ê–¥–º–∏–Ω-–∫–æ–º–∞–Ω–¥—ã: /settimer ‚Äî –Ω–∞–∑–Ω–∞—á–∏—Ç—å/—Å–±—Ä–æ—Å–∏—Ç—å –≤—Ä–µ–º—è /notify [–≤—Å–µ–º/–¥–∞/–Ω–µ—Ç] —Ç–µ–∫—Å—Ç ‚Äî —Ä–∞—Å—Å—ã–ª–∫–∞ /promote ID ‚Äî –≤—ã–¥–∞—Ç—å –∞–¥–º–∏–Ω–∫—É /participants ‚Äî —É—á–∞—Å—Ç–Ω–∏–∫–∏ /backup –ø–∞—Ä–æ–ª—å ‚Äî –≤—ã–≥—Ä—É–∑–∫–∞ –±–∞–∑—ã" bot.send_message(message.chat.id, text + FOOTER)

@bot.message_handler(commands=["contact"]) def contact_cmd(message): bot.send_message(message.chat.id, "üì¢ –°–≤—è–∑—å —Å –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä–æ–º: https://t.me/feedback_for_event_bot" + FOOTER)

@bot.message_handler(commands=["info"]) def info_cmd(message): if timer_data["timestamp"]: dt = datetime.fromtimestamp(timer_data["timestamp"]) now = datetime.now() delta = dt - now time_text = f"üåá –ù–∞—á–∞–ª–æ –∏–≥—Ä—ã –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ –Ω–∞ {dt.strftime('%Y-%m-%d %H:%M')} ({dt.strftime('%A')})\n‚è≥ –î–æ –Ω–∞—á–∞–ª–∞: {delta.days} –¥–Ω {delta.seconds // 3600} —á {(delta.seconds % 3600) // 60} –º–∏–Ω" else: time_text = "‚è∞ –ù–∞—á–∞–ª–æ –∏–≥—Ä—ã –µ—â—ë –Ω–µ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ!" bot.send_message(message.chat.id, f"üéÆ –ö–æ–Ω–∫—É—Ä—Å –æ—Ç @wokolad\n{time_text}\nüéÅ –ì–ª–∞–≤–Ω—ã–π –ø—Ä–∏–∑: –î–æ–Ω–∞—Ç-–∫–µ–π—Å" + FOOTER)

@bot.message_handler(commands=["event"]) def event_cmd(message): user_states[message.chat.id] = {"step": 1, "answers": {}} bot.send_message(message.chat.id, "üë§ –ö–∞–∫–æ–π —É –≤–∞—Å –∏–≥—Ä–æ–≤–æ–π –Ω–∏–∫ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ 24mine? (–¥–æ 25 —Å–∏–º–≤–æ–ª–æ–≤)")

@bot.message_handler(commands=["admin"]) def admin_cmd(message): if message.from_user.id in organizers: text = "‚öñÔ∏è –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å: /settimer /notify [–≤—Å–µ–º/–¥–∞/–Ω–µ—Ç] —Ç–µ–∫—Å—Ç /promote ID /participants /backup –ø–∞—Ä–æ–ª—å" bot.send_message(message.chat.id, text)

@bot.message_handler(commands=["settimer"]) def settimer_cmd(message): if message.from_user.id in organizers: bot.send_message(message.chat.id, "üïí –í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è (–ì–ì–ì–ì-–ú–ú-–î–î –ß–ß:–ú–ú) –∏–ª–∏ '—Å–±—Ä–æ—Å' –¥–ª—è –æ—Ç–º–µ–Ω—ã") user_states[message.chat.id] = {"admin_timer": True}

@bot.message_handler(commands=["promote"]) def promote_cmd(message): if message.from_user.id in organizers: parts = message.text.split() if len(parts) == 2 and parts[1].isdigit(): new_admin = int(parts[1]) if new_admin not in organizers: organizers.append(new_admin) save_json(ORGANIZERS_FILE, organizers) bot.send_message(message.chat.id, f"‚úÖ {new_admin} —Ç–µ–ø–µ—Ä—å –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä.")

@bot.message_handler(commands=["participants"]) def participants_cmd(message): if message.from_user.id in organizers: if not users: bot.send_message(message.chat.id, "üòü –£—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –Ω–µ—Ç.") return msg = "üìÑ –£—á–∞—Å—Ç–Ω–∏–∫–∏:\n" for uid, data in users.items(): msg += f"\nüë§ @{data.get('username', '-')[:25]} (ID: {uid})" for k, v in data['answers'].items(): msg += f"\n‚Ä¢ {k}: {v}" msg += "\n" bot.send_message(message.chat.id, msg)

@bot.message_handler(commands=["backup"]) def backup_cmd(message): if message.from_user.id in organizers: parts = message.text.split() if len(parts) == 2 and parts[1] == BACKUP_PASSWORD: with open(USERS_FILE) as f: content = f.read() bot.send_document(message.chat.id, ("users.json", content)) else: bot.send_message(message.chat.id, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å")

@bot.message_handler(commands=["notify"]) def notify_cmd(message): if message.from_user.id in organizers: parts = message.text.split(" ", 2) if len(parts) < 3: return bot.send_message(message.chat.id, "‚ùì –ü—Ä–∏–º–µ—Ä: /notify –¥–∞ –ü—Ä–∏–≤–µ—Ç") target, text = parts[1], parts[2] for uid, data in users.items(): answer = data["answers"].get("–ë—É–¥–µ—Ç —É—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å", "").lower() if (target == "–¥–∞" and "–¥–∞" in answer) or (target == "–Ω–µ—Ç" and "–Ω–µ—Ç" in answer) or target == "–≤—Å–µ–º": try: bot.send_message(int(uid), text + FOOTER) except: pass

Input handler

@bot.message_handler(func=lambda msg: msg.chat.id in user_states) def handle_state(msg): state = user_states[msg.chat.id]

if "admin_timer" in state:
    if msg.text.lower() == "—Å–±—Ä–æ—Å":
        timer_data["timestamp"] = None
        save_json(TIMER_FILE, timer_data)
        bot.send_message(msg.chat.id, "‚úÖ –¢–∞–π–º–µ—Ä —Å–±—Ä–æ—à–µ–Ω")
    else:
        try:
            dt = datetime.strptime(msg.text, "%Y-%m-%d %H:%M")
            timer_data["timestamp"] = int(dt.timestamp())
            save_json(TIMER_FILE, timer_data)
            bot.send_message(msg.chat.id, f"‚úÖ –¢–∞–π–º–µ—Ä —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –Ω–∞ {dt}")
        except:
            bot.send_message(msg.chat.id, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ü—Ä–∏–º–µ—Ä: 2025-07-10 18:30")
    user_states.pop(msg.chat.id)
    return

step = state.get("step")
if step == 1:
    if len(msg.text) > 25:
        return bot.send_message(msg.chat.id, "‚ùå –ù–∏–∫ –Ω–µ –¥–æ–ª–∂–µ–Ω –ø—Ä–µ–≤—ã—à–∞—Ç—å 25 —Å–∏–º–≤–æ–ª–æ–≤")
    state["answers"]["–ò–≥—Ä–æ–≤–æ–π –Ω–∏–∫"] = msg.text
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
    markup.add("–î–∞, —Ö–æ—á—É –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è", "–ù–µ—Ç", "–ü–æ–¥—É–º–∞—é")
    bot.send_message(msg.chat.id, "üìù –í—ã —Ö–æ—Ç–∏—Ç–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è –Ω–∞ –∫–æ–Ω–∫—É—Ä—Å?", reply_markup=markup)
    state["step"] = 2
elif step == 2:
    state["answers"]["–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è"] = msg.text
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
    markup.add("–ë—É–¥—É —É—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å", "–ù–µ –±—É–¥—É", "–ü–æ–¥—É–º–∞—é", "–°–º–æ—Ç—Ä—è –≤–æ —Å–∫–æ–ª—å–∫–æ")
    bot.send_message(msg.chat.id, "‚ùì –í—ã –±—É–¥–µ—Ç–µ —É—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å –≤ –∫–æ–Ω–∫—É—Ä—Å–µ?", reply_markup=markup)
    state["step"] = 3
elif step == 3:
    state["answers"]["–ë—É–¥–µ—Ç —É—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å"] = msg.text
    bot.send_message(msg.chat.id, "üåç –° –∫–∞–∫–æ–≥–æ —Ä–µ–≥–∏–æ–Ω–∞ –≤—ã –±—É–¥–µ—Ç–µ —É—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å? (–ù–∞–ø–∏—à–∏—Ç–µ —Å—Ç—Ä–∞–Ω—É)", reply_markup=types.ReplyKeyboardRemove())
    state["step"] = 4
elif step == 4:
    state["answers"]["–†–µ–≥–∏–æ–Ω"] = msg.text
    users[str(msg.from_user.id)] = {
        "username": msg.from_user.username or "-",
        "answers": state["answers"]
    }
    save_json(USERS_FILE, users)
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", "‚ùå –û—Ç–º–µ–Ω–∞", "‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –∞–Ω–∫–µ—Ç—É")
    bot.send_message(msg.chat.id, "üöÄ –í–∞—à–∞ –∞–Ω–∫–µ—Ç–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞. –ß—Ç–æ –¥–∞–ª—å—à–µ?", reply_markup=markup)
    user_states.pop(msg.chat.id)

Flask webhook

@app.route("/", methods=["GET"]) def index(): return "Bot is running"

@app.route("/", methods=["POST"]) def webhook(): update = telebot.types.Update.de_json(request.data.decode("utf-8")) bot.process_new_updates([update]) return "ok", 200

if name == "main": port = int(os.environ.get("PORT", 8080)) app.run(host="0.0.0.0", port=port)
