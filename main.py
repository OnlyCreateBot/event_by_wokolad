import os
import json
import telebot
from datetime import datetime
from flask import Flask, request

BOT_TOKEN = os.environ.get("7976353061:AAGSwksP7Q1o-utMNZczyibZKLEua2Toh1w")
ADMIN_ID = int(os.environ.get("ADMIN_ID", "6702974375"))  # –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 123456

bot = telebot.TeleBot(BOT_TOKEN)
app = Flask(__name__)

USERS_FILE = "users.json"
TIMER_FILE = "timer.json"
ORGANIZERS_FILE = "organizers.json"

if os.path.exists(USERS_FILE):
    with open(USERS_FILE) as f:
        users = json.load(f)
else:
    users = {}

if os.path.exists(ORGANIZERS_FILE):
    with open(ORGANIZERS_FILE) as f:
        organizers = json.load(f)
else:
    organizers = [ADMIN_ID]

if os.path.exists(TIMER_FILE):
    with open(TIMER_FILE) as f:
        timer_data = json.load(f)
else:
    timer_data = {"timestamp": None}

user_states = {}

@bot.message_handler(commands=["start"])
def cmd_start(message):
    uid = message.from_user.id
    name = message.from_user.first_name or "–ò–≥—Ä–æ–∫"
    is_admin = uid in organizers
    role = "–í—ã –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä –∏–≥—Ä—ã. –í–∞–º –¥–æ—Å—Ç—É–ø–Ω—ã –≤—Å–µ –∫–æ–º–∞–Ω–¥—ã." if is_admin else "–í—ã –∏–≥—Ä–æ–∫."
    bot.send_message(uid, f"–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, {name}!
{role}")

@bot.message_handler(commands=["help"])
def cmd_help(message):
    help_text = "üìñ –°–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥:\n/start ‚Äì –Ω–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É\n/help ‚Äì —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥\n/info ‚Äì –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–æ–Ω–∫—É—Ä—Å–µ\n/contact ‚Äì —Å–≤—è–∑–∞—Ç—å—Å—è —Å –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä–æ–º\n/event ‚Äì —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–∞ –∫–æ–Ω–∫—É—Ä—Å"
    bot.send_message(message.chat.id, help_text)

@bot.message_handler(commands=["info"])
def cmd_info(message):
    if timer_data["timestamp"]:
        event_time = datetime.fromtimestamp(timer_data["timestamp"])
        now = datetime.now()
        delta = event_time - now
        if delta.total_seconds() > 0:
            hours = delta.seconds // 3600
            minutes = (delta.seconds % 3600) // 60
            timer_text = f"‚è≥ –î–æ –Ω–∞—á–∞–ª–∞ –∫–æ–Ω–∫—É—Ä—Å–∞: {delta.days} –¥–Ω {hours} —á {minutes} –º–∏–Ω"
        else:
            timer_text = "üéâ –ö–æ–Ω–∫—É—Ä—Å —É–∂–µ –Ω–∞—á–∞–ª—Å—è!"
    else:
        timer_text = "‚è≥ –î–æ –Ω–∞—á–∞–ª–∞ –∫–æ–Ω–∫—É—Ä—Å–∞: –°–∫–æ—Ä–æ"
    info = f"üéÆ –ö–æ–Ω–∫—É—Ä—Å –æ—Ç wokolad\nüåê –°–µ—Ä–≤–µ—Ä: play.24mine.ru\nüì± –ü–æ—Ä—Ç: 19133\nüß© –í–µ—Ä—Å–∏—è: Minecraft PE 0.14.x\nüéÅ –ü—Ä–∏–∑: –î–æ–Ω–∞—Ç –∫–µ–π—Å\n{timer_text}"
    bot.send_message(message.chat.id, info)

@bot.message_handler(commands=["contact"])
def cmd_contact(message):
    bot.send_message(message.chat.id, "üì© –°–≤—è–∑—å —Å –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä–æ–º: https://t.me/LivegramBot?start=wokolad")

@bot.message_handler(commands=["event"])
def cmd_event(message):
    bot.send_message(message.chat.id, "üìù –ö–∞–∫ —Ç–µ–±—è –∑–æ–≤—É—Ç?")
    user_states[message.chat.id] = {"step": 1, "answers": {}}

@bot.message_handler(commands=["admin"])
def cmd_admin(message):
    if message.from_user.id not in organizers:
        return
    text = "üõ† –ê–¥–º–∏–Ω-–∫–æ–º–∞–Ω–¥—ã:\n/settimer ‚Äì —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ç–∞–π–º–µ—Ä\n/promote ID ‚Äì –ø–æ–≤—ã—Å–∏—Ç—å –¥–æ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä–∞\n/participants ‚Äì —Å–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤"
    bot.send_message(message.chat.id, text)

@bot.message_handler(commands=["settimer"])
def cmd_settimer(message):
    if message.from_user.id not in organizers:
        return
    bot.send_message(message.chat.id, "üìÖ –í–≤–µ–¥–∏ –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ –∫–æ–Ω–∫—É—Ä—Å–∞ (–ì–ì–ì–ì-–ú–ú-–î–î –ß–ß:–ú–ú)")
    user_states[message.chat.id] = {"admin_timer": True}

@bot.message_handler(commands=["participants"])
def cmd_participants(message):
    if message.from_user.id not in organizers:
        return
    text = "üìù –£—á–∞—Å—Ç–Ω–∏–∫–∏:\n"
    for uid, data in users.items():
        text += f"üë§ @{data.get('username', '–±–µ–∑ username')} (ID: {uid})\n"
        for k, v in data['answers'].items():
            text += f"‚Ä¢ {k}: {v}\n"
        text += "\n"
    bot.send_message(message.chat.id, text or "–ù–µ—Ç –∞–Ω–∫–µ—Ç")

@bot.message_handler(commands=["promote"])
def cmd_promote(message):
    if message.from_user.id not in organizers:
        return
    parts = message.text.split()
    if len(parts) == 2:
        try:
            new_admin = int(parts[1])
            if new_admin not in organizers:
                organizers.append(new_admin)
                with open(ORGANIZERS_FILE, "w") as f:
                    json.dump(organizers, f)
                bot.send_message(message.chat.id, f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {new_admin} —Ç–µ–ø–µ—Ä—å –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä")
        except:
            bot.send_message(message.chat.id, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏")
    else:
        bot.send_message(message.chat.id, "‚ùó –ü—Ä–∏–º–µ—Ä: /promote 123456789")

@bot.message_handler(func=lambda msg: msg.chat.id in user_states)
def handle_state(msg):
    state = user_states[msg.chat.id]
    if "admin_timer" in state:
        try:
            dt = datetime.strptime(msg.text, "%Y-%m-%d %H:%M")
            timer_data["timestamp"] = int(dt.timestamp())
            with open(TIMER_FILE, "w") as f:
                json.dump(timer_data, f)
            bot.send_message(msg.chat.id, f"‚úÖ –¢–∞–π–º–µ—Ä —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {dt}")
        except:
            bot.send_message(msg.chat.id, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ü—Ä–∏–º–µ—Ä: 2025-07-10 18:30")
        user_states.pop(msg.chat.id)
        return

    step = state.get("step")
    if step == 1:
        state["answers"]["–ò–º—è"] = msg.text
        bot.send_message(msg.chat.id, "‚úÖ –¢—ã –ø—Ä–∏–¥—ë—à—å –Ω–∞ –∫–æ–Ω–∫—É—Ä—Å? (–î–∞ / –ù–µ—Ç / –ù–µ –∑–Ω–∞—é)")
        state["step"] = 2
    elif step == 2:
        state["answers"]["–ü—Ä–∏–¥—ë—Ç"] = msg.text
        bot.send_message(msg.chat.id, "üåç –û—Ç–∫—É–¥–∞ —Ç—ã?")
        state["step"] = 3
    elif step == 3:
        state["answers"]["–ú–µ—Å—Ç–æ"] = msg.text
        users[str(msg.from_user.id)] = {
            "username": msg.from_user.username or "-",
            "answers": state["answers"]
        }
        with open(USERS_FILE, "w") as f:
            json.dump(users, f, indent=2)
        bot.send_message(msg.chat.id, "üéâ –°–ø–∞—Å–∏–±–æ, —Ç—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω!")
        user_states.pop(msg.chat.id)

@app.route("/", methods=["GET"])
def home():
    return "Bot is running!"

@app.route("/", methods=["POST"])
def webhook():
    update = telebot.types.Update.de_json(request.data.decode("utf-8"))
    bot.process_new_updates([update])
    return "ok", 200

if __name__ == "__main__":
    app.run(host="0.0.0.0", port=int(os.environ.get("PORT", 8080)))
