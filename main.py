import os
import json
from datetime import datetime
from flask import Flask, request
import telebot

BOT_TOKEN = os.environ.get("BOT_TOKEN")
ADMIN_ID = int(os.environ.get("ADMIN_ID", "123456"))

bot = telebot.TeleBot(BOT_TOKEN)
app = Flask(__name__)

USERS_FILE = "users.json"
TIMER_FILE = "timer.json"
ORGANIZERS_FILE = "organizers.json"

# –ó–∞–≥—Ä—É–∑–∫–∞ –∏–ª–∏ —Å–æ–∑–¥–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
def load_json(filename, default):
    if os.path.exists(filename):
        with open(filename) as f:
            return json.load(f)
    return default

def save_json(filename, data):
    with open(filename, "w") as f:
        json.dump(data, f, indent=2)

users = load_json(USERS_FILE, {})
organizers = load_json(ORGANIZERS_FILE, [ADMIN_ID])
timer_data = load_json(TIMER_FILE, {"timestamp": None})

user_states = {}

# –ö–æ–º–∞–Ω–¥—ã
@bot.message_handler(commands=["start"])
def cmd_start(message):
    uid = message.from_user.id
    name = message.from_user.first_name or "–ò–≥—Ä–æ–∫"
    role = "–í—ã –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä. –í–∞–º –¥–æ—Å—Ç—É–ø–Ω—ã –∞–¥–º–∏–Ω-–∫–æ–º–∞–Ω–¥—ã." if uid in organizers else "–í—ã –∏–≥—Ä–æ–∫."
    bot.send_message(uid, f"üëã –ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, {name}!\n{role}")

@bot.message_handler(commands=["help"])
def cmd_help(message):
    text = "üìñ –ö–æ–º–∞–Ω–¥—ã:\n/start ‚Äî –Ω–∞—á–∞—Ç—å\n/help ‚Äî –ø–æ–º–æ—â—å\n/info ‚Äî –∏–Ω—Ñ–æ –æ –∫–æ–Ω–∫—É—Ä—Å–µ\n/event ‚Äî —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è\n/contact ‚Äî —Å–≤—è–∑—å —Å –æ—Ä–≥–æ–º\n/admin ‚Äî –∞–¥–º–∏–Ω-–∫–æ–º–∞–Ω–¥—ã (—Ç–æ–ª—å–∫–æ –¥–ª—è –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä–æ–≤)"
    bot.send_message(message.chat.id, text)

@bot.message_handler(commands=["info"])
def cmd_info(message):
    if timer_data["timestamp"]:
        event_time = datetime.fromtimestamp(timer_data["timestamp"])
        now = datetime.now()
        delta = event_time - now
        if delta.total_seconds() > 0:
            h = delta.seconds // 3600
            m = (delta.seconds % 3600) // 60
            t = f"‚è≥ –î–æ –Ω–∞—á–∞–ª–∞: {delta.days} –¥–Ω {h} —á {m} –º–∏–Ω"
        else:
            t = "üéâ –ö–æ–Ω–∫—É—Ä—Å —É–∂–µ –Ω–∞—á–∞–ª—Å—è!"
    else:
        t = "‚è≥ –¢–∞–π–º–µ—Ä –µ—â—ë –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω."
    text = f"üéÆ –ö–æ–Ω–∫—É—Ä—Å –æ—Ç wokolad\nüåê –°–µ—Ä–≤–µ—Ä: play.24mine.ru\nüì± –ü–æ—Ä—Ç: 19133\nüß© –í–µ—Ä—Å–∏—è: 0.14.x\nüéÅ –ü—Ä–∏–∑: –¥–æ–Ω–∞—Ç –∫–µ–π—Å\n{t}"
    bot.send_message(message.chat.id, text)

@bot.message_handler(commands=["contact"])
def cmd_contact(message):
    bot.send_message(message.chat.id, "üì© –ù–∞–ø–∏—à–∏—Ç–µ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä—É: https://t.me/feedback_for_event_bot")

@bot.message_handler(commands=["event"])
def cmd_event(message):
    user_states[message.chat.id] = {"step": 1, "answers": {}}
    bot.send_message(message.chat.id, "üìù –ö–∞–∫ —Ç–µ–±—è –∑–æ–≤—É—Ç?")

# –ê–¥–º–∏–Ω –∫–æ–º–∞–Ω–¥—ã
@bot.message_handler(commands=["admin"])
def cmd_admin(message):
    if message.from_user.id not in organizers:
        return
    text = "üõ† –ê–¥–º–∏–Ω-–∫–æ–º–∞–Ω–¥—ã:\n/settimer ‚Äî —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ç–∞–π–º–µ—Ä\n/participants ‚Äî —Å–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤\n/promote ID ‚Äî –≤—ã–¥–∞—Ç—å –ø—Ä–∞–≤–∞ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä–∞"
    bot.send_message(message.chat.id, text)

@bot.message_handler(commands=["settimer"])
def cmd_settimer(message):
    if message.from_user.id not in organizers:
        return
    bot.send_message(message.chat.id, "üïì –í–≤–µ–¥–∏ –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ (–ì–ì–ì–ì-–ú–ú-–î–î –ß–ß:–ú–ú)")
    user_states[message.chat.id] = {"admin_timer": True}

@bot.message_handler(commands=["participants"])
def cmd_participants(message):
    if message.from_user.id not in organizers:
        return
    if not users:
        bot.send_message(message.chat.id, "üò¢ –ù–µ—Ç —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤.")
        return
    msg = "üßæ –£—á–∞—Å—Ç–Ω–∏–∫–∏:\n"
    for uid, data in users.items():
        msg += f"üë§ @{data.get('username', '–±–µ–∑ username')} (ID: {uid})\n"
        for k, v in data['answers'].items():
            msg += f"‚Ä¢ {k}: {v}\n"
        msg += "\n"
    bot.send_message(message.chat.id, msg)

@bot.message_handler(commands=["promote"])
def cmd_promote(message):
    if message.from_user.id not in organizers:
        return
    parts = message.text.split()
    if len(parts) == 2 and parts[1].isdigit():
        new_admin = int(parts[1])
        if new_admin not in organizers:
            organizers.append(new_admin)
            save_json(ORGANIZERS_FILE, organizers)
            bot.send_message(message.chat.id, f"‚úÖ {new_admin} —Ç–µ–ø–µ—Ä—å –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä.")
    else:
        bot.send_message(message.chat.id, "‚ùó –ü—Ä–∏–º–µ—Ä: /promote 123456789")

# –û—Ç–≤–µ—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
@bot.message_handler(func=lambda m: m.chat.id in user_states)
def handle_state(msg):
    state = user_states[msg.chat.id]

    if "admin_timer" in state:
        try:
            dt = datetime.strptime(msg.text, "%Y-%m-%d %H:%M")
            timer_data["timestamp"] = int(dt.timestamp())
            save_json(TIMER_FILE, timer_data)
            bot.send_message(msg.chat.id, f"‚úÖ –¢–∞–π–º–µ—Ä —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {dt}")
        except:
            bot.send_message(msg.chat.id, "‚ùå –§–æ—Ä–º–∞—Ç –Ω–µ–≤–µ—Ä–Ω—ã–π. –ü—Ä–∏–º–µ—Ä: 2025-07-10 18:30")
        user_states.pop(msg.chat.id)
        return

    step = state["step"]
    if step == 1:
        state["answers"]["–ò–º—è"] = msg.text
        bot.send_message(msg.chat.id, "–¢—ã –ø—Ä–∏–¥–µ—à—å –Ω–∞ –∫–æ–Ω–∫—É—Ä—Å? (–î–∞ / –ù–µ—Ç / –ù–µ –∑–Ω–∞—é)")
        state["step"] = 2
    elif step == 2:
        state["answers"]["–ü—Ä–∏–¥—ë—Ç"] = msg.text
        bot.send_message(msg.chat.id, "–û—Ç–∫—É–¥–∞ —Ç—ã?")
        state["step"] = 3
    elif step == 3:
        state["answers"]["–ú–µ—Å—Ç–æ"] = msg.text
        users[str(msg.from_user.id)] = {
            "username": msg.from_user.username or "-",
            "answers": state["answers"]
        }
        save_json(USERS_FILE, users)
        bot.send_message(msg.chat.id, "üéâ –°–ø–∞—Å–∏–±–æ! –¢—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω.")
        user_states.pop(msg.chat.id)

# Flask (–¥–ª—è webhook)
@app.route("/", methods=["GET"])
def index():
    return "Bot is running"

@app.route("/", methods=["POST"])
def webhook():
    update = telebot.types.Update.de_json(request.data.decode("utf-8"))
    bot.process_new_updates([update])
    return "ok", 200

if __name__ == "__main__":
    port = int(os.environ.get("PORT", 8080))
    app.run(host="0.0.0.0", port=port)
