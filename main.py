import os
import json
import time
import threading
from datetime import datetime
from flask import Flask, request
import telebot
from telebot import types
import requests

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
BOT_TOKEN = os.environ.get("BOT_TOKEN")
ADMIN_ID = int(os.environ.get("ADMIN_ID", 0))
ADMIN_PASSWORD = os.environ.get("ADMIN_PASSWORD")
RULES_TEXT = os.environ.get("RULES_TEXT", "–ü—Ä–∞–≤–∏–ª–∞ –ø–æ–∫–∞ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã")

bot = telebot.TeleBot(BOT_TOKEN)
app = Flask(__name__)

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã
PRIVILEGES = [
    "–ò–≥—Ä–æ–∫", "–ü—Ç–∏—Ü–∞", "–í–∏–ø", "–ê—Ä—Ö–∏—Ç–µ–∫—Ç–æ—Ä", "–ê—Å—Ç—Ä–æ–Ω–æ–º", 
    "–ê–Ω—Ç–∏-–ì—Ä–∏—Ñ–µ—Ä", "–ü–æ–ª–∏—Ü–∏—è", "–ê–¥–º–∏–Ω", "–•–µ–ª–ø–µ—Ä", 
    "–ò–º–ø–µ—Ä–∞—Ç–æ—Ä", "–ú–∏–ª–ª–∏–∞—Ä–¥–µ—Ä", "–û–ø–µ—Ä–∞—Ç–æ—Ä", "–°–ø–æ–Ω—Å–æ—Ä", "–ó–∞–≥–∞–¥–æ—á–Ω–∏–∫"
]

PARTICIPATION_OPTIONS = [
    "–ù–µ—Ç", "–î–∞", "–ü–æ–¥—É–º–∞—é", "–ù–µ –∑–Ω–∞—é", 
    "–ï—Å–ª–∏ –æ—Å–≤–æ–±–æ–∂—É—Å—å, –±—É–¥—É —É—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å"
]

# –§–∞–π–ª—ã –¥–∞–Ω–Ω—ã—Ö
USERS_FILE = "users.json"
TIMER_FILE = "timer.json"
ORGANIZERS_FILE = "organizers.json"
RULES_FILE = "rules.json"

# –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö
def load_json(filename, default):
    try:
        if os.path.exists(filename):
            with open(filename, "r", encoding="utf-8") as f:
                return json.load(f)
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ {filename}: {e}")
    return default

def save_json(filename, data):
    try:
        with open(filename, "w", encoding="utf-8") as f:
            json.dump(data, f, indent=2, ensure_ascii=False)
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è {filename}: {e}")

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö
users = load_json(USERS_FILE, {})
organizers = load_json(ORGANIZERS_FILE, [ADMIN_ID])
timer_data = load_json(TIMER_FILE, {"timestamp": None})
rules_data = load_json(RULES_FILE, {"text": RULES_TEXT})

user_states = {}
notify_selections = {}

# –û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Ñ—É—Ç–µ—Ä
def get_footer():
    footer = "\n\n‚≠ê –ö–æ–Ω–∫—É—Ä—Å –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ 24mine (Minecraft PE 0.14.x)"
    
    if timer_data["timestamp"]:
        event_time = datetime.fromtimestamp(timer_data["timestamp"])
        footer += f"\nüïí –í—Ä–µ–º—è –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è: {event_time.strftime('%d.%m.%Y %H:%M')}"
    else:
        footer += "\nüïí –í—Ä–µ–º—è –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è: –Ω–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–æ"
        
    footer += "\nüè† IP: play.24mine.ru"
    footer += "\nüîó –ü–æ—Ä—Ç: 19133"
    footer += "\nüèÜ –ì–ª–∞–≤–Ω—ã–π –ø—Ä–∏–∑: –î–æ–Ω–∞—Ç-–∫–µ–π—Å"
    footer += "\nüë§ –û—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä: –ò–≥—Ä–æ–∫ wokolad —Å –ø—Ä–∏–≤–∏–ª–µ–≥–∏–µ–π –ê–Ω—Ç–∏-–ì—Ä–∏—Ñ–µ—Ä"
    
    return footer

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∞–Ω–∏—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
def keep_alive():
    while True:
        try:
            # –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏ –æ–±—Ä–∞—â–∞–µ–º—Å—è –∫ health-—á–µ–∫–µ—Ä—É
            domain = os.environ.get("ZEABUR_DOMAIN")
            if domain:
                requests.get(f"https://{domain}/health", timeout=10)
            time.sleep(300)  # –ö–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç
        except Exception as e:
            print(f"Keep-alive error: {e}")
            time.sleep(60)

# –ó–∞–ø—É—Å–∫ –ø–æ—Ç–æ–∫–∞ –ø–æ–¥–¥–µ—Ä–∂–∞–Ω–∏—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
if os.environ.get("ENV") == "PRODUCTION":
    threading.Thread(target=keep_alive, daemon=True).start()

# –ö–æ–º–∞–Ω–¥—ã
@bot.message_handler(commands=["start"])
def cmd_start(message):
    uid = message.from_user.id
    name = message.from_user.first_name or "–ò–≥—Ä–æ–∫"
    is_admin = uid in organizers
    role = "üöÄ –í—ã –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä. –í–∞–º –¥–æ—Å—Ç—É–ø–Ω—ã –∫–æ–º–∞–Ω–¥—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞." if is_admin else "üèÉ –í—ã —É—á–∞—Å—Ç–Ω–∏–∫."
    
    # –û—á–∏—Å—Ç–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    if uid in user_states:
        user_states.pop(uid)
    
    text = f"üëã –ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, {name}!\n{role}\n\n"
    text += "üí° –ù–∞–ø–∏—à–∏—Ç–µ /help —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å –∫–æ–º–∞–Ω–¥—ã\n"
    text += "üìú –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø—Ä–∞–≤–∏–ª–∞: /rules"
    
    bot.send_message(uid, text + get_footer())

@bot.message_handler(commands=["help"])
def cmd_help(message):
    text = "üìö –û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
    text += "/start - –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫ –±–æ—Ç–∞\n"
    text += "/help - —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥\n"
    text += "/info - –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–æ–Ω–∫—É—Ä—Å–µ\n"
    text += "/rules - –ø—Ä–∞–≤–∏–ª–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞\n"
    text += "/event - –∑–∞–ø–æ–ª–Ω–∏—Ç—å –∞–Ω–∫–µ—Ç—É\n"
    text += "/edit - –∏–∑–º–µ–Ω–∏—Ç—å –∞–Ω–∫–µ—Ç—É\n"
    text += "/delete - —É–¥–∞–ª–∏—Ç—å –∞–Ω–∫–µ—Ç—É\n"
    text += "/contact - —Å–≤—è–∑–∞—Ç—å—Å—è —Å –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä–æ–º\n"
    
    if message.from_user.id in organizers:
        text += "\nüõ† –ê–¥–º–∏–Ω-–∫–æ–º–∞–Ω–¥—ã:\n"
        text += "/settimer - —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤—Ä–µ–º—è –∫–æ–Ω–∫—É—Ä—Å–∞\n"
        text += "/removetimer - —É–¥–∞–ª–∏—Ç—å –≤—Ä–µ–º—è –∫–æ–Ω–∫—É—Ä—Å–∞\n"
        text += "/participants - —Å–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤\n"
        text += "/promote ID - –≤—ã–¥–∞—Ç—å –ø—Ä–∞–≤–∞ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä–∞\n"
        text += "/removeadmin ID - —É–¥–∞–ª–∏—Ç—å –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä–∞\n"
        text += "/notify - —É–≤–µ–¥–æ–º–∏—Ç—å –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º\n"
        text += "/backup –ü–ê–†–û–õ–¨ - —Ä–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è\n"
        text += "/export - —ç–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö –≤ CSV\n"
        text += "/setrules - —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –Ω–æ–≤—ã–µ –ø—Ä–∞–≤–∏–ª–∞\n"
        text += "/getrules - –ø–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—É—â–∏–µ –ø—Ä–∞–≤–∏–ª–∞"
    
    bot.send_message(message.chat.id, text + get_footer())

@bot.message_handler(commands=["info"])
def cmd_info(message):
    text = "üéÆ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–æ–Ω–∫—É—Ä—Å–µ:\n\n"
    
    if timer_data["timestamp"]:
        event_time = datetime.fromtimestamp(timer_data["timestamp"])
        now = datetime.now()
        delta = event_time - now
        
        if delta.total_seconds() > 0:
            days = delta.days
            hours = delta.seconds // 3600
            minutes = (delta.seconds % 3600) // 60
            text += f"‚è≥ –î–æ –Ω–∞—á–∞–ª–∞: {days} –¥–Ω–µ–π, {hours} —á–∞—Å–æ–≤, {minutes} –º–∏–Ω—É—Ç"
        else:
            text += "üöÄ –ö–æ–Ω–∫—É—Ä—Å —É–∂–µ –Ω–∞—á–∞–ª—Å—è!"
    else:
        text += "‚è± –í—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ –ø–æ–∫–∞ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ"
    
    text += get_footer()
    bot.send_message(message.chat.id, text)

@bot.message_handler(commands=["contact"])
def cmd_contact(message):
    bot.send_message(
        message.chat.id, 
        "üì® –°–≤—è–∑—å —Å –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä–æ–º: @wokolad\n" + get_footer()
    )

@bot.message_handler(commands=["rules"])
def cmd_rules(message):
    bot.send_message(
        message.chat.id, 
        f"üìú –ü—Ä–∞–≤–∏–ª–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞ –∏ –∫–æ–Ω–∫—É—Ä—Å–∞:\n\n{rules_data['text']}" + get_footer()
    )

@bot.message_handler(commands=["setrules"])
def cmd_set_rules(message):
    if message.from_user.id not in organizers:
        return
        
    text = message.text.replace("/setrules", "").strip()
    if not text:
        bot.send_message(message.chat.id, "‚ùå –£–∫–∞–∂–∏—Ç–µ —Ç–µ–∫—Å—Ç –ø—Ä–∞–≤–∏–ª –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã")
        return
        
    rules_data["text"] = text
    save_json(RULES_FILE, rules_data)
    bot.send_message(message.chat.id, "‚úÖ –ü—Ä–∞–≤–∏–ª–∞ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω—ã!" + get_footer())

@bot.message_handler(commands=["getrules"])
def cmd_get_rules(message):
    if message.from_user.id not in organizers:
        return
        
    bot.send_message(
        message.chat.id, 
        f"üìú –¢–µ–∫—É—â–∏–µ –ø—Ä–∞–≤–∏–ª–∞:\n\n{rules_data['text']}" + get_footer()
    )

@bot.message_handler(commands=["event", "edit"])
def cmd_event(message):
    uid = str(message.from_user.id)
    chat_id = message.chat.id
    
    # –î–ª—è –∫–æ–º–∞–Ω–¥—ã edit –ø—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –∞–Ω–∫–µ—Ç—ã
    if "edit" in message.text and uid not in users:
        bot.send_message(chat_id, "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –∞–Ω–∫–µ—Ç—ã –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")
        return
    
    # –ù–∞—á–∏–Ω–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –∞–Ω–∫–µ—Ç—ã
    user_states[chat_id] = {"step": 1, "answers": {}}
    bot.send_message(chat_id, "üÜî –í–∞—à –∏–≥—Ä–æ–≤–æ–π –Ω–∏–∫–Ω–µ–π–º –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ 24mine 0.14.x?")

@bot.message_handler(commands=["delete"])
def cmd_delete(message):
    uid = str(message.from_user.id)
    if uid in users:
        users.pop(uid)
        save_json(USERS_FILE, users)
        
        # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        if message.chat.id in user_states:
            user_states.pop(message.chat.id)
            
        bot.send_message(message.chat.id, "‚úÖ –í–∞—à–∞ –∞–Ω–∫–µ—Ç–∞ —É–¥–∞–ª–µ–Ω–∞." + get_footer())
    else:
        bot.send_message(message.chat.id, "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –∞–Ω–∫–µ—Ç—ã." + get_footer())

# –ê–¥–º–∏–Ω-–∫–æ–º–∞–Ω–¥—ã
@bot.message_handler(commands=["settimer"])
def cmd_settimer(message):
    if message.from_user.id in organizers:
        bot.send_message(message.chat.id, "‚è∞ –í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è (–ì–ì–ì–ì-–ú–ú-–î–î –ß–ß:–ú–ú):")
        user_states[message.chat.id] = {"admin_timer": True}

@bot.message_handler(commands=["removetimer"])
def cmd_removetimer(message):
    if message.from_user.id in organizers:
        timer_data["timestamp"] = None
        save_json(TIMER_FILE, timer_data)
        bot.send_message(message.chat.id, "‚úÖ –¢–∞–π–º–µ—Ä –∫–æ–Ω–∫—É—Ä—Å–∞ —É–¥–∞–ª–µ–Ω." + get_footer())

@bot.message_handler(commands=["participants"])
def cmd_participants(message):
    if message.from_user.id not in organizers:
        return
        
    if not users:
        bot.send_message(message.chat.id, "üò¢ –ù–µ—Ç —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤." + get_footer())
        return
        
    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –≤—ã–≤–æ–¥
    result = ["üìã –£—á–∞—Å—Ç–Ω–∏–∫–∏:\n"]
    
    for i, (uid, data) in enumerate(users.items(), 1):
        result.append(f"\nüë§ –£—á–∞—Å—Ç–Ω–∏–∫ #{i}:")
        result.append(f"‚îî @{data.get('username', '–±–µ–∑ username')}")
        
        for q, a in data['answers'].items():
            result.append(f"   ‚Ä¢ {q}: {a}")
    
    full_text = "\n".join(result)
    
    # –†–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ —á–∞—Å—Ç–∏ –µ—Å–ª–∏ –ø—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç
    if len(full_text) > 4000:
        parts = []
        while full_text:
            if len(full_text) > 4000:
                part = full_text[:4000]
                last_newline = part.rfind('\n')
                if last_newline != -1:
                    part = full_text[:last_newline]
                    full_text = full_text[last_newline+1:]
                else:
                    full_text = full_text[4000:]
                parts.append(part)
            else:
                parts.append(full_text)
                full_text = ""
        
        for part in parts:
            bot.send_message(message.chat.id, part)
    else:
        bot.send_message(message.chat.id, full_text + get_footer())

@bot.message_handler(commands=["promote"])
def cmd_promote(message):
    if message.from_user.id in organizers:
        parts = message.text.split()
        if len(parts) == 2 and parts[1].isdigit():
            uid = int(parts[1])
            if uid not in organizers:
                organizers.append(uid)
                save_json(ORGANIZERS_FILE, organizers)
                bot.send_message(message.chat.id, f"‚úÖ {uid} —Ç–µ–ø–µ—Ä—å –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä." + get_footer())

@bot.message_handler(commands=["removeadmin"])
def cmd_removeadmin(message):
    if message.from_user.id in organizers:
        parts = message.text.split()
        if len(parts) == 2 and parts[1].isdigit():
            uid = int(parts[1])
            if uid in organizers and uid != ADMIN_ID:
                organizers.remove(uid)
                save_json(ORGANIZERS_FILE, organizers)
                bot.send_message(message.chat.id, f"‚úÖ {uid} –±–æ–ª—å—à–µ –Ω–µ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä." + get_footer())

# –£–ª—É—á—à–µ–Ω–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ —Ä–∞—Å—Å—ã–ª–∫–∏
@bot.message_handler(commands=["notify"])
def cmd_notify(message):
    if message.from_user.id not in organizers:
        return
        
    # –°–æ–∑–¥–∞–µ–º –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π
    markup = types.InlineKeyboardMarkup(row_width=2)
    
    # –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø–æ —Å—Ç–∞—Ç—É—Å—É
    markup.add(
        types.InlineKeyboardButton("–í—Å–µ —É—á–∞—Å—Ç–Ω–∏–∫–∏", callback_data="notify_all"),
        types.InlineKeyboardButton("–ó–∞–∏–Ω—Ç–µ—Ä–µ—Å–æ–≤–∞–Ω–Ω—ã–µ", callback_data="notify_interested"),
        types.InlineKeyboardButton("–ù–µ–∑–∞–∏–Ω—Ç–µ—Ä–µ—Å–æ–≤–∞–Ω–Ω—ã–µ", callback_data="notify_uninterested"),
        types.InlineKeyboardButton("–ù–µ –∑–∞–ø–æ–ª–Ω–∏–ª–∏ –∞–Ω–∫–µ—Ç—É", callback_data="notify_noform")
    )
    
    # –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø–æ –ø—Ä–∏–≤–∏–ª–µ–≥–∏—è–º
    markup.row(types.InlineKeyboardButton("–í—ã–±—Ä–∞—Ç—å –ø—Ä–∏–≤–∏–ª–µ–≥–∏–∏", callback_data="select_privileges"))
    
    bot.send_message(
        message.chat.id, 
        "üì® –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏:",
        reply_markup=markup
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–æ–∫ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏
@bot.callback_query_handler(func=lambda call: call.data.startswith('notify_') or call.data == 'select_privileges')
def handle_notify_selection(call):
    if call.data == 'select_privileges':
        # –°–æ–∑–¥–∞–µ–º –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ –ø—Ä–∏–≤–∏–ª–µ–≥–∏–π
        markup = types.InlineKeyboardMarkup(row_width=3)
        
        for privilege in PRIVILEGES:
            markup.add(types.InlineKeyboardButton(
                privilege, 
                callback_data=f"priv_{privilege}"
            ))
            
        markup.row(types.InlineKeyboardButton("–ù–∞—á–∞—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É", callback_data="start_notify"))
        
        bot.edit_message_text(
            "üîç –í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–∏–≤–∏–ª–µ–≥–∏–∏:",
            call.message.chat.id,
            call.message.message_id,
            reply_markup=markup
        )
    elif call.data.startswith('priv_'):
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –ø—Ä–∏–≤–∏–ª–µ–≥–∏–π
        privilege = call.data[5:]
        selected = call.message.json.get('reply_markup', {}).get('inline_keyboard', [])
        
        # –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º –≤—ã–±–æ—Ä
        new_keyboard = []
        for row in selected:
            new_row = []
            for btn in row:
                if btn['callback_data'] == call.data:
                    text = f"‚úÖ {btn['text']}" if not btn['text'].startswith('‚úÖ') else btn['text'][2:]
                    new_row.append(types.InlineKeyboardButton(text, callback_data=btn['callback_data']))
                else:
                    new_row.append(btn)
            new_keyboard.append(new_row)
        
        markup = types.InlineKeyboardMarkup(new_keyboard)
        markup.row(types.InlineKeyboardButton("–ù–∞—á–∞—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É", callback_data="start_notify"))
        
        bot.edit_message_reply_markup(
            call.message.chat.id,
            call.message.message_id,
            reply_markup=markup
        )
    elif call.data == 'start_notify':
        # –ü–æ–ª—É—á–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–µ –ø—Ä–∏–≤–∏–ª–µ–≥–∏–∏
        selected_privileges = []
        for row in call.message.reply_markup.keyboard:
            for btn in row:
                if btn.text.startswith('‚úÖ'):
                    selected_privileges.append(btn.text[2:])
        
        if not selected_privileges:
            bot.answer_callback_query(call.id, "‚ùå –í—ã–±–µ—Ä–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–Ω—É –ø—Ä–∏–≤–∏–ª–µ–≥–∏—é")
            return
            
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±–æ—Ä
        user_states[call.message.chat.id] = {
            "notify_type": "privileges",
            "privileges": selected_privileges
        }
        
        bot.send_message(call.message.chat.id, "‚úâÔ∏è –í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏:")
    else:
        # –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        user_states[call.message.chat.id] = {"notify_type": call.data.split('_')[1]}
        bot.send_message(call.message.chat.id, "‚úâÔ∏è –í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏:")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∞–Ω–∫–µ—Ç—ã
@bot.message_handler(func=lambda m: m.chat.id in user_states)
def handle_state(msg):
    state = user_states[msg.chat.id]
    uid = str(msg.from_user.id)
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —Ç–∞–π–º–µ—Ä–∞
    if "admin_timer" in state:
        try:
            dt = datetime.strptime(msg.text, "%Y-%m-%d %H:%M")
            timer_data["timestamp"] = int(dt.timestamp())
            save_json(TIMER_FILE, timer_data)
            bot.send_message(msg.chat.id, "‚úÖ –í—Ä–µ–º—è —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ." + get_footer())
        except:
            bot.send_message(msg.chat.id, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ü—Ä–∏–º–µ—Ä: 2025-07-12 18:00")
        user_states.pop(msg.chat.id)
        return
        
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–∞—Å—Å—ã–ª–∫–∏
    if "notify_type" in state:
        text = msg.text + get_footer()
        count = 0
        
        # –†–∞—Å—Å—ã–ª–∫–∞ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
        if state["notify_type"] == "all":
            for user_id in users:
                try:
                    bot.send_message(int(user_id), text)
                    count += 1
                except Exception as e:
                    print(f"–û—à–∏–±–∫–∞ —Ä–∞—Å—Å—ã–ª–∫–∏ –¥–ª—è {user_id}: {e}")
                    
        elif state["notify_type"] == "interested":
            for user_id, data in users.items():
                answer = data["answers"].get("–ë—É–¥–µ—Ç–µ —É—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å –Ω–∞ –∫–æ–Ω–∫—É—Ä—Å–µ?", "").lower()
                if answer in ["–¥–∞", "–ø–æ–¥—É–º–∞—é"]:
                    try:
                        bot.send_message(int(user_id), text)
                        count += 1
                    except:
                        pass
                        
        elif state["notify_type"] == "uninterested":
            for user_id, data in users.items():
                answer = data["answers"].get("–ë—É–¥–µ—Ç–µ —É—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å –Ω–∞ –∫–æ–Ω–∫—É—Ä—Å–µ?", "").lower()
                if answer == "–Ω–µ—Ç":
                    try:
                        bot.send_message(int(user_id), text)
                        count += 1
                    except:
                        pass
                        
        elif state["notify_type"] == "noform":
            # –î–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –±–µ–∑ –∞–Ω–∫–µ—Ç—ã –Ω—É–∂–µ–Ω –æ—Ç–¥–µ–ª—å–Ω—ã–π —Å–ø–∏—Å–æ–∫
            # –í —ç—Ç–æ–π —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–æ
            pass
            
        elif state["notify_type"] == "privileges":
            for user_id, data in users.items():
                privilege = data["answers"].get("–í–∞—à–∞ –ø—Ä–∏–≤–∏–ª–µ–≥–∏—è –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ 24mine 0.14.x?", "")
                if privilege in state["privileges"]:
                    try:
                        bot.send_message(int(user_id), text)
                        count += 1
                    except:
                        pass
        
        bot.send_message(msg.chat.id, f"‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {count}" + get_footer())
        user_states.pop(msg.chat.id)
        return
        
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∞–Ω–∫–µ—Ç—ã
    step = state["step"]
    answers = state["answers"]
    
    if step == 1:  # –ù–∏–∫–Ω–µ–π–º
        answers["–í–∞—à –∏–≥—Ä–æ–≤–æ–π –Ω–∏–∫–Ω–µ–π–º –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ 24mine 0.14.x?"] = msg.text.strip()[:25]
        state["step"] = 2
        
        # –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –ø—Ä–∏–≤–∏–ª–µ–≥–∏–π
        markup = types.ReplyKeyboardMarkup(row_width=3, resize_keyboard=True)
        markup.add(*PRIVILEGES)
        
        bot.send_message(msg.chat.id, "üëë –í–∞—à–∞ –ø—Ä–∏–≤–∏–ª–µ–≥–∏—è –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ 24mine 0.14.x?", reply_markup=markup)
        
    elif step == 2:  # –ü—Ä–∏–≤–∏–ª–µ–≥–∏—è
        if msg.text not in PRIVILEGES:
            bot.send_message(msg.chat.id, "‚ùå –í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–∏–≤–∏–ª–µ–≥–∏—é –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –∫–Ω–æ–ø–æ–∫")
            return
            
        answers["–í–∞—à–∞ –ø—Ä–∏–≤–∏–ª–µ–≥–∏—è –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ 24mine 0.14.x?"] = msg.text
        state["step"] = 3
        
        # –ö–Ω–æ–ø–∫–∏ –¥–ª—è —É—á–∞—Å—Ç–∏—è
        markup = types.ReplyKeyboardMarkup(row_width=2, resize_keyboard=True)
        markup.add(*PARTICIPATION_OPTIONS)
        
        bot.send_message(msg.chat.id, "üéØ –ë—É–¥–µ—Ç–µ —É—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å –Ω–∞ –∫–æ–Ω–∫—É—Ä—Å–µ?", reply_markup=markup)
        
    elif step == 3:  # –£—á–∞—Å—Ç–∏–µ
        answers["–ë—É–¥–µ—Ç–µ —É—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å –Ω–∞ –∫–æ–Ω–∫—É—Ä—Å–µ?"] = msg.text
        state["step"] = 4
        bot.send_message(
            msg.chat.id, 
            "üåç –° –∫–∞–∫–æ–≥–æ –≤—ã —Ä–µ–≥–∏–æ–Ω–∞? (–Ω–∞–ø–∏—à–∏—Ç–µ —Å—Ç—Ä–∞–Ω—É)",
            reply_markup=types.ReplyKeyboardRemove()
        )
        
    elif step == 4:  # –†–µ–≥–∏–æ–Ω
        answers["–í–∞—à —Ä–µ–≥–∏–æ–Ω (—Å—Ç—Ä–∞–Ω–∞)"] = msg.text.strip()
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∞–Ω–∫–µ—Ç—É
        users[uid] = {
            "username": msg.from_user.username or f"id_{uid}",
            "answers": answers,
            "timestamp": datetime.now().isoformat()
        }
        save_json(USERS_FILE, users)
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –∏—Ç–æ–≥–æ–≤—É—é –∞–Ω–∫–µ—Ç—É
        text = "üìù –í–∞—à–∞ –∞–Ω–∫–µ—Ç–∞:\n"
        for q, a in answers.items():
            text += f"‚Ä¢ {q}: {a}\n"
        
        bot.send_message(msg.chat.id, text + get_footer())
        user_states.pop(msg.chat.id, None)

# –≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö
@bot.message_handler(commands=["export"])
def cmd_export(message):
    if message.from_user.id not in organizers:
        return
        
    # –°–æ–∑–¥–∞–µ–º CSV —Ñ–∞–π–ª
    csv_data = "ID;Username;–ù–∏–∫–Ω–µ–π–º;–ü—Ä–∏–≤–∏–ª–µ–≥–∏—è;–£—á–∞—Å—Ç–∏–µ;–†–µ–≥–∏–æ–Ω;–î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏\n"
    
    for uid, data in users.items():
        answers = data["answers"]
        csv_data += f"{uid};{data['username']};"
        csv_data += f"{answers.get('–í–∞—à –∏–≥—Ä–æ–≤–æ–π –Ω–∏–∫–Ω–µ–π–º –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ 24mine 0.14.x?', '')};"
        csv_data += f"{answers.get('–í–∞—à–∞ –ø—Ä–∏–≤–∏–ª–µ–≥–∏—è –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ 24mine 0.14.x?', '')};"
        csv_data += f"{answers.get('–ë—É–¥–µ—Ç–µ —É—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å –Ω–∞ –∫–æ–Ω–∫—É—Ä—Å–µ?', '')};"
        csv_data += f"{answers.get('–í–∞—à —Ä–µ–≥–∏–æ–Ω (—Å—Ç—Ä–∞–Ω–∞)', '')};"
        csv_data += f"{data.get('timestamp', '')}\n"
    
    with open("participants.csv", "w", encoding="utf-8") as f:
        f.write(csv_data)
    
    with open("participants.csv", "rb") as f:
        bot.send_document(message.chat.id, f, caption="üìä –≠–∫—Å–ø–æ—Ä—Ç —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤")

# –†–µ–∑–µ—Ä–≤–Ω–æ–µ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ
@bot.message_handler(commands=["backup"])
def cmd_backup(message):
    if message.from_user.id not in organizers:
        return
        
    parts = message.text.split()
    if len(parts) < 2 or parts[1] != ADMIN_PASSWORD:
        bot.send_message(message.chat.id, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å")
        return
        
    try:
        # –°–æ–∑–¥–∞–µ–º —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö
        backup_data = {
            "users": users,
            "organizers": organizers,
            "timer": timer_data,
            "rules": rules_data,
            "timestamp": datetime.now().isoformat()
        }
        
        with open("backup.json", "w", encoding="utf-8") as f:
            json.dump(backup_data, f, ensure_ascii=False, indent=2)
            
        with open("backup.json", "rb") as f:
            bot.send_document(message.chat.id, f, caption="‚úÖ –†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è –¥–∞–Ω–Ω—ã—Ö")
            
    except Exception as e:
        bot.send_message(message.chat.id, f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏: {str(e)}")

# Health check –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
@app.route('/health')
def health_check():
    return "OK", 200

# –í–µ–±-—Å–µ—Ä–≤–µ—Ä
@app.route("/", methods=["GET"])
def index():
    return "Bot is running"

@app.route("/", methods=["POST"])
def webhook():
    if request.headers.get('content-type') == 'application/json':
        json_string = request.get_data().decode('utf-8')
        update = telebot.types.Update.de_json(json_string)
        bot.process_new_updates([update])
        return "ok", 200
    return "Bad Request", 400

# –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤–µ–±—Ö—É–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
def setup_webhook():
    if not BOT_TOKEN:
        print("BOT_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!")
        return
        
    try:
        domain = os.environ.get("ZEABUR_DOMAIN")
        if not domain:
            print("ZEABUR_DOMAIN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω! –í–µ–±—Ö—É–∫ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
            return
            
        url = f"https://api.telegram.org/bot{BOT_TOKEN}/setWebhook"
        payload = {
            "url": f"https://{domain}/"
        }
        response = requests.post(url, json=payload)
        print(f"–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≤–µ–±—Ö—É–∫–∞: {response.status_code} {response.text}")
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤–µ–±—Ö—É–∫–∞: {e}")

if __name__ == "__main__":
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≤–µ–±—Ö—É–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –≤ –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ
    if os.environ.get("ENV") == "PRODUCTION":
        setup_webhook()
        
    port = int(os.environ.get("PORT", 8080))
    app.run(host="0.0.0.0", port=port)
