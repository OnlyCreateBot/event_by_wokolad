import os
import json
from datetime import datetime
from flask import Flask, request
import telebot

BOT_TOKEN = os.environ.get("BOT_TOKEN")
ADMIN_ID = int(os.environ.get("ADMIN_ID", "123456"))

bot = telebot.TeleBot(BOT_TOKEN)
app = Flask(__name__)

USERS_FILE = "users.json"
TIMER_FILE = "timer.json"
ORGANIZERS_FILE = "organizers.json"

FOOTER = "\n\nüéÆ –ö–æ–Ω–∫—É—Ä—Å –ø—Ä–æ—Ö–æ–¥–∏—Ç –Ω–∞ Minecraft PE —Å–µ—Ä–≤–µ—Ä–µ\nIP: play.24mine.ru\n–ü–æ—Ä—Ç: 19133\n–û—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä: @wokolad"

def load_json(filename, default):
    if os.path.exists(filename):
        with open(filename) as f:
            return json.load(f)
    return default

def save_json(filename, data):
    with open(filename, "w") as f:
        json.dump(data, f, indent=2)

users = load_json(USERS_FILE, {})
organizers = load_json(ORGANIZERS_FILE, [ADMIN_ID])
timer_data = load_json(TIMER_FILE, {"timestamp": None})

user_states = {}

@bot.message_handler(commands=["start"])
def cmd_start(message):
    uid = message.from_user.id
    name = message.from_user.first_name or "–ò–≥—Ä–æ–∫"
    role = "–í—ã –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä. –í–∞–º –¥–æ—Å—Ç—É–ø–Ω—ã –∞–¥–º–∏–Ω-–∫–æ–º–∞–Ω–¥—ã." if uid in organizers else "–í—ã –∏–≥—Ä–æ–∫."
    welcome = (
        f"üëã –ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, {name}!\n"
        f"{role}\n\n"
        "üî∏ –≠—Ç–æ—Ç –±–æ—Ç –ø–æ–º–æ–∂–µ—Ç –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è –Ω–∞ –∫–æ–Ω–∫—É—Ä—Å –ø–æ Minecraft.\n"
        "‚ÑπÔ∏è –ù–∞–ø–∏—à–∏—Ç–µ /help, —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥."
        + FOOTER
    )
    bot.send_message(uid, welcome)

@bot.message_handler(commands=["help"])
def cmd_help(message):
    uid = message.from_user.id
    is_admin = uid in organizers
    text = "üìñ –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
    text += "/start ‚Äî –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ\n"
    text += "/help ‚Äî —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥\n"
    text += "/info ‚Äî –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–æ–Ω–∫—É—Ä—Å–µ\n"
    text += "/event ‚Äî —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è\n"
    text += "/edit ‚Äî –∏–∑–º–µ–Ω–∏—Ç—å –∞–Ω–∫–µ—Ç—É\n"
    text += "/delete ‚Äî —É–¥–∞–ª–∏—Ç—å –∞–Ω–∫–µ—Ç—É\n"
    text += "/contact ‚Äî —Å–≤—è–∑—å —Å –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä–æ–º\n"
    if is_admin:
        text += "\nüõ† –ê–¥–º–∏–Ω-–∫–æ–º–∞–Ω–¥—ã:\n"
        text += "/admin ‚Äî —Å–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω-–∫–æ–º–∞–Ω–¥\n"
        text += "/settimer ‚Äî —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –¥–∞—Ç—É/–≤—Ä–µ–º—è\n"
        text += "/participants ‚Äî —É—á–∞—Å—Ç–Ω–∏–∫–∏\n"
        text += "/promote ID ‚Äî –≤—ã–¥–∞—Ç—å –ø—Ä–∞–≤–∞ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä–∞\n"
        text += "/notify ‚Äî —É–≤–µ–¥–æ–º–∏—Ç—å –≤—Å–µ—Ö –∑–∞–∏–Ω—Ç–µ—Ä–µ—Å–æ–≤–∞–Ω–Ω—ã—Ö"
    bot.send_message(message.chat.id, text + FOOTER)

@bot.message_handler(commands=["info"])
def cmd_info(message):
    if timer_data["timestamp"]:
        event_time = datetime.fromtimestamp(timer_data["timestamp"])
        now = datetime.now()
        delta = event_time - now
        if delta.total_seconds() > 0:
            h = delta.seconds // 3600
            m = (delta.seconds % 3600) // 60
            t = f"üìÖ –ù–∞—á–∞–ª–æ –∏–≥—Ä—ã: {event_time.strftime('%Y-%m-%d %H:%M')} ({event_time.strftime('%A')})\n‚è≥ –î–æ –Ω–∞—á–∞–ª–∞: {delta.days} –¥–Ω {h} —á {m} –º–∏–Ω"
        else:
            t = "üéâ –ö–æ–Ω–∫—É—Ä—Å —É–∂–µ –Ω–∞—á–∞–ª—Å—è!"
    else:
        t = "‚è≥ –ù–∞—á–∞–ª–æ –∏–≥—Ä—ã –µ—â—ë –Ω–µ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ!"
    bot.send_message(message.chat.id, f"üéÆ –ö–æ–Ω–∫—É—Ä—Å –æ—Ç wokolad\nüåê –°–µ—Ä–≤–µ—Ä: play.24mine.ru\nüì± –ü–æ—Ä—Ç: 19133\nüß© –í–µ—Ä—Å–∏—è: 0.14.x\nüéÅ –ü—Ä–∏–∑: –¥–æ–Ω–∞—Ç –∫–µ–π—Å\n{t}" + FOOTER)

@bot.message_handler(commands=["contact"])
def cmd_contact(message):
    bot.send_message(message.chat.id, "üì© –ù–∞–ø–∏—à–∏—Ç–µ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä—É: https://t.me/feedback_for_event_bot" + FOOTER)

@bot.message_handler(commands=["event"])
def cmd_event(message):
    user_states[message.chat.id] = {"step": 1, "answers": {}}
    bot.send_message(message.chat.id, "üìù –ö–∞–∫–æ–π —É –≤–∞—Å –∏–≥—Ä–æ–≤–æ–π –Ω–∏–∫–Ω–µ–π–º –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ 24mine?")

@bot.message_handler(commands=["edit"])
def cmd_edit(message):
    uid = str(message.from_user.id)
    if uid in users:
        user_states[message.chat.id] = {"step": 1, "answers": {}}
        bot.send_message(message.chat.id, "üîÅ –û–±–Ω–æ–≤–∏–º –∞–Ω–∫–µ—Ç—É!\n–ö–∞–∫–æ–π —É –≤–∞—Å –∏–≥—Ä–æ–≤–æ–π –Ω–∏–∫–Ω–µ–π–º?")
    else:
        bot.send_message(message.chat.id, "‚ùó –í—ã –µ—â—ë –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã. –ù–∞–ø–∏—à–∏—Ç–µ /event")

@bot.message_handler(commands=["delete"])
def cmd_delete(message):
    uid = str(message.from_user.id)
    if uid in users:
        del users[uid]
        save_json(USERS_FILE, users)
        bot.send_message(message.chat.id, "üóë –í–∞—à–∞ –∞–Ω–∫–µ—Ç–∞ —É–¥–∞–ª–µ–Ω–∞.")
    else:
        bot.send_message(message.chat.id, "‚ùó –£ –≤–∞—Å –Ω–µ—Ç –∞–Ω–∫–µ—Ç—ã.")

@bot.message_handler(commands=["admin"])
def cmd_admin(message):
    if message.from_user.id not in organizers:
        return
    text = "üõ† –ê–¥–º–∏–Ω-–∫–æ–º–∞–Ω–¥—ã:\n/settimer ‚Äî —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤—Ä–µ–º—è\n/participants ‚Äî —Å–ø–∏—Å–æ–∫\n/promote ID ‚Äî –¥–∞—Ç—å –ø—Ä–∞–≤–∞\n/notify ‚Äî —É–≤–µ–¥–æ–º–∏—Ç—å –∏–≥—Ä–æ–∫–æ–≤"
    bot.send_message(message.chat.id, text)

@bot.message_handler(commands=["settimer"])
def cmd_settimer(message):
    if message.from_user.id not in organizers:
        return
    bot.send_message(message.chat.id, "üïì –í–≤–µ–¥–∏ –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è (—Ñ–æ—Ä–º–∞—Ç: –ì–ì–ì–ì-–ú–ú-–î–î –ß–ß:–ú–ú)")
    user_states[message.chat.id] = {"admin_timer": True}

@bot.message_handler(commands=["participants"])
def cmd_participants(message):
    if message.from_user.id not in organizers:
        return
    if not users:
        bot.send_message(message.chat.id, "üò¢ –ù–µ—Ç —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤.")
        return
    msg = "üßæ –£—á–∞—Å—Ç–Ω–∏–∫–∏:\n"
    for uid, data in users.items():
        msg += f"üë§ @{data.get('username', '-')}\n"
        for k, v in data["answers"].items():
            msg += f"‚Ä¢ {k}: {v}\n"
        msg += "\n"
    bot.send_message(message.chat.id, msg)

@bot.message_handler(commands=["promote"])
def cmd_promote(message):
    if message.from_user.id not in organizers:
        return
    parts = message.text.split()
    if len(parts) == 2 and parts[1].isdigit():
        new_admin = int(parts[1])
        if new_admin not in organizers:
            organizers.append(new_admin)
            save_json(ORGANIZERS_FILE, organizers)
            bot.send_message(message.chat.id, f"‚úÖ {new_admin} —Ç–µ–ø–µ—Ä—å –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä.")
    else:
        bot.send_message(message.chat.id, "‚ùó –ü—Ä–∏–º–µ—Ä: /promote 123456789")

@bot.message_handler(commands=["notify"])
def cmd_notify(message):
    if message.from_user.id not in organizers:
        return
    count = 0
    for uid, data in users.items():
        ans = data.get("answers", {})
        interested = any(
            ans.get(key, "").lower() in ["–¥–∞", "–ø–æ–¥—É–º–∞—é", "—Å–º–æ—Ç—Ä—è –≤ –∫–∞–∫–æ–µ –≤—Ä–µ–º—è, –µ—Å–ª–∏ –±—É–¥—É —Å–≤–æ–±–æ–¥–µ–Ω –ø—Ä–∏–¥—É"]
            for key in ["–ü—Ä–∏–¥—ë—Ç", "–ë—É–¥–µ—Ç —É—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å"]
        )
        if interested:
            try:
                bot.send_message(int(uid), f"üì¢ –ü—Ä–∏–≤–µ—Ç, {ans.get('–ò–≥—Ä–æ–≤–æ–π –Ω–∏–∫', '')}! –°–∫–æ—Ä–æ —Å—Ç–∞—Ä—Ç—É–µ—Ç –∫–æ–Ω–∫—É—Ä—Å –æ—Ç @wokolad! –ù–µ –ø—Ä–æ–ø—É—Å—Ç–∏!{FOOTER}")
                count += 1
            except:
                pass
    bot.send_message(message.chat.id, f"‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–æ –∏–≥—Ä–æ–∫–æ–≤: {count}")

@bot.message_handler(func=lambda m: m.chat.id in user_states)
def handle_state(msg):
    state = user_states[msg.chat.id]
    if "admin_timer" in state:
        try:
            dt = datetime.strptime(msg.text, "%Y-%m-%d %H:%M")
            timer_data["timestamp"] = int(dt.timestamp())
            save_json(TIMER_FILE, timer_data)
            bot.send_message(msg.chat.id, f"‚úÖ –¢–∞–π–º–µ—Ä —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –Ω–∞: {dt}")
        except:
            bot.send_message(msg.chat.id, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ü—Ä–∏–º–µ—Ä: 2025-07-10 18:30")
        user_states.pop(msg.chat.id)
        return

    step = state["step"]
    if step == 1:
        state["answers"]["–ò–≥—Ä–æ–≤–æ–π –Ω–∏–∫"] = msg.text
        bot.send_message(msg.chat.id, "–í—ã —Ö–æ—Ç–∏—Ç–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è –Ω–∞ –∫–æ–Ω–∫—É—Ä—Å? (–î–∞ / –ù–µ—Ç / –ü–æ–¥—É–º–∞—é)")
        state["step"] = 2
    elif step == 2:
        state["answers"]["–ü—Ä–∏–¥—ë—Ç"] = msg.text
        bot.send_message(msg.chat.id, "–í—ã –±—É–¥–µ—Ç–µ —É—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å –≤ –∫–æ–Ω–∫—É—Ä—Å–µ? (–î–∞ / –ù–µ—Ç / –ü–æ–¥—É–º–∞—é / –ù–µ –∑–Ω–∞—é)")
        state["step"] = 3
    elif step == 3:
        state["answers"]["–ë—É–¥–µ—Ç —É—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å"] = msg.text
        bot.send_message(msg.chat.id, "üåç –° –∫–∞–∫–æ–≥–æ —Ä–µ–≥–∏–æ–Ω–∞ –≤—ã –±—É–¥–µ—Ç–µ –∏–≥—Ä–∞—Ç—å? (–º–∞—Ç–µ—Ä–∏–∫, —Å—Ç—Ä–∞–Ω–∞)")
        state["step"] = 4
    elif step == 4:
        state["answers"]["–ú–µ—Å—Ç–æ"] = msg.text
        users[str(msg.from_user.id)] = {
            "username": msg.from_user.username or "-",
            "answers": state["answers"]
        }
        save_json(USERS_FILE, users)
        bot.send_message(msg.chat.id, "üéâ –°–ø–∞—Å–∏–±–æ! –í—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã!" + FOOTER)
        user_states.pop(msg.chat.id)

@app.route("/", methods=["GET"])
def index():
    return "Bot is running"

@app.route("/", methods=["POST"])
def webhook():
    update = telebot.types.Update.de_json(request.data.decode("utf-8"))
    bot.process_new_updates([update])
    return "ok", 200

if __name__ == "__main__":
    port = int(os.environ.get("PORT", 8080))
    app.run(host="0.0.0.0", port=port)
